services:
  # IAM Service
  iam-db:
    image: postgres:17-alpine
    container_name: iam-postgres
    environment:
      POSTGRES_DB: iam_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: bavui4444
    volumes:
      - iam_db_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d iam_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  iam-service:
    build:
      context: ./iam-service
      dockerfile: Dockerfile
    container_name: iam-service
    depends_on:
      iam-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://iam-db:5432/iam_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: bavui4444
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_SHOW_SQL: "true"
      SERVER_PORT: 8080
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - app-network
    restart: unless-stopped

  # Patient Service
  patient-db:
    image: postgres:17-alpine
    container_name: patient-postgres
    environment:
      POSTGRES_DB: patient
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: bavui4444
    volumes:
      - patient_db_data:/var/lib/postgresql/data
      - ./patient-service/database/init-patient-service.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5433:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d patient"]
      interval: 10s
      timeout: 5s
      retries: 5

  patient-service:
    build:
      context: ./patient-service
      dockerfile: Dockerfile
    container_name: patient-service
    depends_on:
      patient-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-db:5432/patient
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: bavui4444
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_SHOW_SQL: "true"
      SERVER_PORT: 8081
      SERVER_SERVLET_CONTEXT_PATH: /patient
    ports:
      - "127.0.0.1:8081:8081"
    networks:
      - app-network
    restart: unless-stopped

  # Test Order Service
  testorder-db:
    image: postgres:17-alpine
    container_name: testorder-postgres
    environment:
      POSTGRES_DB: testorder
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: bavui4444
    volumes:
      - testorder_db_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5434:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d testorder"]
      interval: 10s
      timeout: 5s
      retries: 5

  testorder-service:
    build:
      context: ./testorder-service
      dockerfile: Dockerfile
    container_name: testorder-service
    depends_on:
      testorder-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://testorder-db:5432/testorder
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: bavui4444
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_SHOW_SQL: "true"
      SERVER_PORT: 8082
    ports:
      - "127.0.0.1:8082:8082"
    networks:
      - app-network
    restart: unless-stopped

volumes:
  iam_db_data:
  patient_db_data:
  testorder_db_data:

networks:
  app-network:
    driver: bridge
