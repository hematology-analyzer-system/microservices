# Test Orders Service CI/CD Pipeline
.testorder-service-changes: &testorder-service-changes
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main")
      changes:
        - testorder-service/pom.xml
        - testorder-service/src/**/*
        - testorder-service/.gitlab-ci.yml
        - testorder-service/Dockerfile
      when: always
    - if: ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main")
      changes:
        - testorder-service/pom.xml
        - testorder-service/src/**/*
        - testorder-service/.gitlab-ci.yml
        - testorder-service/Dockerfile
      when: always
    - when: never

# Build and Package Test Orders Service 
build-and-package-testorder-service:
  <<: *testorder-service-changes
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - cd testorder-service
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script: |
    echo "Building and pushing Test Orders Service Docker image..."
    export DATETIME=$(date +%Y%m%d-%H%M%S)
    echo "Building with timestamp - $DATETIME"
    echo "Building complete Docker image using your Dockerfile"
    docker build -t $REGISTRY/testorder-service:$DATETIME .
    docker build -t $REGISTRY/testorder-service:latest .
    echo "Pushing Docker images..."
    docker push $REGISTRY/testorder-service:$DATETIME
    docker push $REGISTRY/testorder-service:latest
    echo "Test Orders Service Docker image built and pushed successfully"
    echo "Available images:"
    echo "  - $REGISTRY/testorder-service:$DATETIME"
    echo "  - $REGISTRY/testorder-service:latest"
  cache:
    key: testorder-docker-$CI_COMMIT_REF_SLUG
    paths:
      - testorder-service/.m2/repository/

# Test Test Orders Service
# test-testorder-service:
#   <<: *testorder-service-changes
#   stage: test
#   image: maven:3.9.4-eclipse-temurin-21
#   services:
#     - postgres:17-alpine
#   variables:
#     POSTGRES_DB: testorder_test
#     POSTGRES_USER: postgres
#     POSTGRES_PASSWORD: test
#     POSTGRES_HOST_AUTH_METHOD: trust
#     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/testorder_test
#     SPRING_DATASOURCE_USERNAME: postgres
#     SPRING_DATASOURCE_PASSWORD: test
#   before_script:
#     - cd testorder-service
#   script:
#     - echo "Running Test Orders Service tests..."
#     - mvn $MAVEN_CLI_OPTS test
#   artifacts:
#     reports:
#       junit: testorder-service/target/surefire-reports/TEST-*.xml
#       coverage_report:
#         coverage_format: jacoco
#         path: testorder-service/target/site/jacoco/jacoco.xml
#     paths:
#       - testorder-service/target/surefire-reports/
#       - testorder-service/target/site/jacoco/
#     expire_in: 1 week
#   coverage: "/Total.*?([0-9]{1,3})%/"
#   dependencies:
#     - build-testorder-service
#   when: manual # Make tests optional until they are written
#   allow_failure: true # Don't block pipeline if tests fail
